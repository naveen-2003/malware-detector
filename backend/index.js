// const express = require("express");
// const cors = require("cors");
// const multer = require("multer");
// const { spawn } = require("child_process");
// const crypto = require("crypto");
// const fs = require("fs");

// const app = express();
// app.use(cors());
// app.use(express.json());

// const malware = {
//   0: "Benign",
//   1: "RedLineStealer",
//   2: "Downloader",
//   3: "RAT",
//   4: "BankingTrojan",
//   5: "SnakeKeyLogger",
//   6: "Spyware",
// };

// const storage = multer.diskStorage({
//   destination: (req, file, cb) => {
//     cb(null, "./public/files");
//   },
//   filename: (req, file, cb) => {
//     // cb(null, `${Date.now()}_${file.originalname}`);
//     cb(null, `${Date.now()}_${file.originalname}`);
//   },
// });

// const upload = multer({ storage }).single("file");

// app.post("/upload", upload, (req, res) => {
//   console.log(req.body);
//   console.log(req.file);
//   const fileBuffer = fs.readFileSync(`./public/files/${req.file.filename}`);
//   const hashSum = crypto.createHash("sha256");
//   hashSum.update(fileBuffer);
//   const fileHash = hashSum.digest("hex");
//   console.log(hex);
//   const resultJson = {
//     fileName: req.file.filename,
//     fileSize: req.file.size,
//     fileType: req.file.mimetype,
//     fileHash: fileHash,
//   };
//   if (req.file.mimetype !== "application/x-ms-dos-executable") {
//     //remvoed application/x-msdownload
//     fs.unlinkSync(`./public/files/${req.file.filename}`);
//     resultJson.msg = "Invalid file type, Please provide a PE(.exe) file only.";
//     resultJson.isPE = false;
//     return res.send(resultJson);
//   }
//   const python = spawn("python", [
//     "./model/__main__.py",
//     `./public/files/${req.file.filename}`,
//   ]);
//   python.stdout.on("data", (data) => {
//     const result = data.toString().trim().split(",");
//     const resultJson = {
//       isPE: true,
//       api_model: malware[result[0]],
//       ddl_model: malware[result[1]],
//       pe_model: malware[result[2]],
//       ps_model: malware[result[3]],
//       msg: "Success",
//     };
//     res.send(resultJson);
//   });
//   python.stderr.on("data", (data) => {
//     console.error(data.toString());
//     res.send("Internal Server Error");
//   });
//   python.on("close", (code) => {
//     console.log(`child process close all stdio with code ${code}`);
//   });
// });

// const port = 5000;
// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });

const express = require("express");
const cors = require("cors");
const multer = require("multer");
const { spawn } = require("child_process");
const crypto = require("crypto");
const fs = require("fs");

const app = express();
app.use(cors());
app.use(express.json());

const malware = {
  0: "Benign",
  1: "RedLineStealer",
  2: "Downloader",
  3: "RAT",
  4: "BankingTrojan",
  5: "SnakeKeyLogger",
  6: "Spyware",
};

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "./public/files");
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}_${file.originalname}`);
  },
});

const upload = multer({ storage }).single("file");

app.post("/upload", upload, (req, res) => {
  console.log(req.body);
  console.log(req.file);
  const fileBuffer = fs.readFileSync(`./public/files/${req.file.filename}`);
  const hashSum = crypto.createHash("sha256");
  hashSum.update(fileBuffer);
  const fileHash = hashSum.digest("hex");
  const resultJson = {
    fileName: req.file.originalname,
    fileSize: req.file.size,
    fileType: req.file.mimetype,
    fileHash: fileHash,
  };
  if (req.file.mimetype !== "application/x-ms-dos-executable") {
    //remvoed application/x-msdownload
    fs.unlinkSync(`./public/files/${req.file.filename}`);
    resultJson.msg = "Invalid file type, Please provide a PE(.exe) file only.";
    resultJson.isPE = false;
    return res.send(resultJson);
  }
  const python = spawn("python", [
    "./model/__main__.py",
    `./public/files/${req.file.filename}`,
  ]);
  python.stdout.on("data", (data) => {
    const result = data.toString().trim().split(",");
    if (result[0] == "Invalid") {
      resultJson.msg =
        "Internal server error, please try again later or try with different file";
      resultJson.isPE = false;
      return res.send(resultJson);
    }
    resultJson.isPE = true;
    resultJson.apiModel = malware[result[0]];
    resultJson.dllModel = malware[result[1]];
    resultJson.peModel = malware[result[2]];
    resultJson.psModel = malware[result[3]];
    resultJson.msg = "Success";
    console.log(resultJson);
    res.send(resultJson);
  });
  python.stderr.on("data", (data) => {
    console.error(data.toString());
    res.send("Internal Server Error");
  });
  python.on("close", (code) => {
    console.log(`child process close all stdio with code ${code}`);
  });
});

const port = 5000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
